{
    "SearchDepth": 6,
    "MaxUnboundArguments": 1,
    "WaitBetweenRunsMaxms": 3000,
    "Tasks": [
        {
            "Name": "last",
            "Valence": "{as:in, b:out}",
            "Examples": "{ {as:[1,2,3], b:3}, {as:[5, 4], b:4} }",
            "NegExamples": "{ {as:[1,2,3], b:1} }",
            "ExpectedPrograms": [
                "dunno"
            ]
        },
        {
            "Name": "sorted_1",
            "Valence": "{a:in, b:in, ab:out}",
            "Examples": "{ {a:1, b:0, ab:1}, {a:2, b:1, ab:2}, {a:3, b:2, ab:3} }",
            "NegExamples": "{ {a:3, b:4, ab:4}, {a:3, b:4, ab:3} }",
            "ExpectedPrograms": [
                "dunno"
            ]
        },
        {
            "Name": "sorted",
            "Valence": "{as:in}",
            "Examples": "{ {as:[1,2,3]}, {as:[2,4,6]} }",
            "NegExamples": "{ {as:[2,1,0]} }",
            "ExpectedPrograms": [
                "dunno"
            ]
        },
        {
            "Name": "minlist",
            "Valence": "{list:in, min:out}",
            "Examples": "{{list:[1,2,3], min:1}, {list:[5,3,6], min:3}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "proj(and(const(b, 0), foldl(proj(and(const(b, 0), min), {a->a, ab->b, b->ab}))), {as->list, b0->min})",
                "proj(and(const(b, 0), foldl(and(const(ab, 0), proj(min, {a->a, ab->b, b->ab})))), {as->list, b0->min})"
            ]
        },
        {
            "Name": "sorted",
            "Valence": "{list:in}",
            "Examples": "{ {list:[1,2,3]}, {list:[2,4,6]} }",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "dunno"
            ]
        },
        {
            "Name": "id1",
            "Valence": "{a:in}",
            "Examples": "{ {a:10}, {a:20} }",
            "NegExamples": "{ }",
            "ExpectedPrograms": [
                "proj(id, {a->a})"
            ]
        },
        {
            "Name": "inc",
            "Valence": "{n:in, s:out}",
            "Examples": "{ {n:1, s:2}, {n:4, s:5} }",
            "NegExamples": "{ }",
            "ExpectedPrograms": [
                "proj(and(const(b, 1), +), {a->n, ab->s})"
            ]
        },
        {
            "Name": "incany",
            "Valence": "{a:in, b:in, ab:out}",
            "Examples": "{ {a:10, b:0, ab:1}, {a:1, b:3, ab:4} }",
            "NegExamples": "{ {a:30, b:5, ab:5} }",
            "ExpectedPrograms": [
                "and(proj(id, {a->a}), proj(and(const(b, 1), +), {a->b, ab->ab}))"
            ]
        },
        {
            "Name": "len",
            "Valence": "{b0:in, as:in, b:out}",
            "Examples": "{ {b0:0, as:[3,7,1], b:3}, {b0:0, as:[9,1], b:2} }",
            "NegExamples": "{ {b0:0, as:[3,2,1], b:2} }",
            "ExpectedPrograms": [
                "foldl(proj(and(id, increment), {a->a, n->b, s->ab}))",
                "foldl(proj(and(id, increment), {b->a, n->b, s->ab}))",
                "foldr(proj(and(id, increment), {a->a, n->b, s->ab}))",
                "foldr(proj(and(id, increment), {b->a, n->b, s->ab}))"
            ]
        }
    ]
}