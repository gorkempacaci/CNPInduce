{
    "SearchDepth": 6,
    "MaxUnboundArguments": 1,
    "WaitBetweenRunsMaxms": 3000,
    "Tasks": [
        {
            "Name": "head",
            "Valence": "{list:in, h:out}",
            "Examples": "{{list:[1,2,3], h:1}, {list:[2], h:2}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [ "proj(cons, {ab->list, a->h})" ]
        },
        {
            "Name": "increment",
            "Valence": "{n:in, s:out}",
            "Examples": "{ {n:1, s:2}, {n:4, s:5} }",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "proj(and(const(b, 1), +), {a->n, ab->s})"
            ]
        },
        {
            "Name": "reverse/3",
            "Valence": "{b0:in, as:in, b:out}",
            "Examples": "{{b0:[], as:[1,2,3], b:[3,2,1]}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [ "foldl(cons)" ]
        },
        {
            "Name": "append/3",
            "Valence": "{b0:in, as:in, b:out}",
            "Examples": "{{b0:[], as:[1], b:[1]}, {b0:[3,4], as:[1,2], b:[1,2,3,4]}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [ "foldr(cons)" ]
        },
        {
            "Name": "append/2",
            "Valence": "{list1:in, list2:in, list3:out}",
            "Examples": "{{list1:[], list2:[1], list3:[1]}, {list1:[1,2], list2:[3,4], list3:[1,2,3,4]}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [ "proj(foldr(cons), {as->list1, b0->list2, b->list3})" ]
        },
        {
            "Name": "reverse/2",
            "Valence": "{as:in, bs:out}",
            "Examples": "{{as:['a'], bs:['a']}, {as:[1,2,3], bs:[3,2,1]}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [ "proj(and(const(b0, []), foldl(cons)), {as->as, b->bs})" ]
        },
        {
            "Name": "sum/2",
            "Valence": "{list:in, sum:out}",
            "Examples": "{{list:[], sum:0}, {list:[1,2,3], sum:6}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "proj(and(const(b0, 0), foldl(+)), {as->list, b->sum})",
                "proj(and(const(b0, 0), foldr(+)), {as->list, b->sum})"
            ]
        },
        {
            "Name": "sumall/3",
            "Valence": "{b0:in, as:in, b:out}",
            "Examples": "{{b0:0, as:[[1], [2]], b:3}, {b0:0, as:[[1,2,3], [4,5,6], [7,8,9]], b:45}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "foldl(proj(foldl(+), {as->a, b0->b, b->ab}))",
                "foldl(proj(foldr(+), {as->a, b0->b, b->ab}))",
                "foldr(proj(foldl(+), {as->a, b0->b, b->ab}))",
                "foldr(proj(foldr(+), {as->a, b0->b, b->ab}))"
            ]
        },
        {
            "Name": "sumall/2",
            "Valence": "{lists:in, sum:out}",
            "Examples": "{{lists:[[1,2], [3,4]], sum:10}, {lists:[[1], [3]], sum:4}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "proj(and(const(b0, 0), foldl(proj(foldl(+), {as->a, b0->b, b->ab}))), {as->lists, b->sum})",
                "proj(and(const(b0, 0), foldl(proj(foldr(+), {as->a, b0->b, b->ab}))), {as->lists, b->sum})",
                "proj(and(const(b0, 0), foldr(proj(foldl(+), {as->a, b0->b, b->ab}))), {as->lists, b->sum})",
                "proj(and(const(b0, 0), foldr(proj(foldr(+), {as->a, b0->b, b->ab}))), {as->lists, b->sum})"
            ]
        },
        {
            "Name": "flatten/3",
            "Valence": "{b0:in, as:in, b:out}",
            "Examples": "{{b0:[], as:[[1,2]], b:[1, 2]}, {b0:[], as:[[1,2], [3,4], [5,6]], b:[1,2,3,4,5,6]}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [ "foldr(proj(foldr(cons), {as->a, b0->b, b->ab}))" ]
        },
        {
            "Name": "flatten",
            "Valence": "{as:in, bs:out}",
            "Examples": "{{as:[[1,2], [], [3]], bs:[1,2,3]}, {as:[[9]], bs:[9]}}",
            "NegExamples": "{}",
            "ExpectedPrograms": [
                "proj(and(const(b0, []), foldr(proj(foldr(cons), {as->a, b0->b, b->ab}))), {as->as, b->bs})"
            ]
        }
    ]
}